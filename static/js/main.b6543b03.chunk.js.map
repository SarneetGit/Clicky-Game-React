{"version":3,"sources":["Components/Navbar/index.js","Components/Grid/index.js","Components/Jumbo/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","color","dark","expand","className","right","to","active","this","props","currentScore","highScore","Component","characters","handleSelection","id","map","char","md","key","hover","zoom","src","image","data-name","name","data-id","alt","onClick","Jumbo","getStyle","bool","0","fontWeight","true","false","message","correct","fluid","style","React","App","state","pickedChars","shuffleCharacters","setState","shuffle","a","j","x","i","length","Math","floor","random","event","target","getAttribute","checkClickGuess","updatedState","includes","toUpperCase","push","updateTopScore","checkWin","Grid","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oiCAiCeA,G,uLApBX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAWC,MAAM,QAAQC,MAAI,EAACC,OAAO,MACnC,kBAAC,IAAD,KACE,4BAAQC,UAAU,cAAlB,sBAAsD,uBAAGA,UAAU,2BAErE,kBAAC,IAAD,CAAcC,OAAK,GACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYC,GAAG,KAAKC,QAAM,GAA1B,kBAA2CC,KAAKC,MAAMC,eAExD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYJ,GAAG,KAAKC,QAAM,GAAC,uBAAGH,UAAU,kBAAxC,IAA8DI,KAAKC,MAAME,mB,GAblEC,cCNN,G,MAAA,gBAAGC,EAAH,EAAGA,WAAaC,EAAhB,EAAgBA,gBAAhB,OACX,kBAAC,IAAD,CAAcV,UAAU,OAAOW,GAAG,eAClC,kBAAC,IAAD,CAAQX,UAAU,QACfS,EAAWG,KAAI,SAAAC,GAAI,OACpB,kBAAC,IAAD,CAAQC,GAAG,IAAIC,IAAKF,EAAKF,IACzB,kBAAC,IAAD,CAASK,OAAK,EAACC,MAAI,GACjB,yBACEC,IAAKL,EAAKM,MACVnB,UAAU,0BACVoB,YAAWP,EAAKQ,KAChBC,UAAST,EAAKF,GACdY,IAAI,GACJC,QAASd,aC0BJe,G,iNArCbC,SAAU,SAACC,GAAD,MAAU,CAElBC,EAAI,CACQC,WAAY,QAGxBC,KAAO,CACKjC,MAAO,QACPgC,WAAY,QAGxBE,MAAQ,CACIlC,MAAO,MACPgC,WAAY,SAGzBF,I,wEAEO,IAAD,EACqBvB,KAAKC,MAAzB2B,EADD,EACCA,QAAQC,EADT,EACSA,QAChB,OACE,kBAAC,IAAD,CAAcC,OAAK,EAAClC,UAAU,WAC5B,kBAAC,IAAD,CAAcA,UAAU,QACtB,wBAAIA,UAAU,cACZmC,MAAO/B,KAAKsB,SAASO,IACP,KAAZD,EAAiB,oDAAsDA,GAE3E,6BACA,wBAAIhC,UAAU,SACd,uBAAGA,UAAU,QAAb,SACA,iFACA,+F,GAjCYoC,IAAM5B,Y,kPCwHX6B,E,2MApHbC,MAAQ,CACN7B,WAAYA,EACZ8B,YAAa,GACbjC,aAAc,EACdC,UAAW,EACXyB,QAAS,GACTC,QAAS,G,EAGXO,kBAAoB,WAClB,EAAKC,SAAS,CACZhC,WAAY,EAAKiC,QAAQ,EAAKJ,MAAM7B,e,EAIxCiC,QAAU,SAAAC,GACR,IAAIC,EAAGC,EAAGC,EACV,IAAKA,EAAIH,EAAEI,OAAS,EAAGD,EAAI,EAAGA,IAC5BF,EAAII,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IACpCD,EAAIF,EAAEG,GACNH,EAAEG,GAAKH,EAAEC,GACTD,EAAEC,GAAKC,EAET,OAAOF,G,EAGTjC,gBAAkB,SAACyC,GACjB,IAAM9B,EAAO8B,EAAMC,OAAOC,aAAa,aACvC,EAAKC,gBAAgBjC,GACrB,EAAKmB,qB,EAMPc,gBAAkB,SAACjC,GACjB,IAAIkC,E,yVAAY,IAAQ,EAAKjB,OACzBiB,EAAahB,YAAYiB,SAASnC,IACpCkC,EAAavB,QAAb,oCAAoDX,EAAKoC,cAAzD,KACAF,EAAahB,YAAc,GAC3BgB,EAAajD,aAAe,EAC5BiD,EAAatB,SAAU,EACvB,EAAKQ,SAAS,CACZT,QAASuB,EAAavB,QACtBO,YAAagB,EAAahB,YAC1BjC,aAAciD,EAAajD,aAC3B2B,QAASsB,EAAatB,YAExBsB,EAAahB,YAAYmB,KAAKrC,GAC9BkC,EAAavB,QAAb,WACAuB,EAAatB,SAAU,EACvB,EAAKQ,SAAS,CACZF,YAAagB,EAAahB,YAC1BP,QAASuB,EAAavB,QACtBC,QAASsB,EAAatB,WAG1B,EAAK0B,eAAeJ,I,EAGtBI,eAAiB,SAACJ,GACZA,EAAahB,YAAYQ,OAASQ,EAAajD,eACjDiD,EAAajD,eACTiD,EAAajD,aAAeiD,EAAahD,WAC3CgD,EAAahD,YAEf,EAAKkC,SAAS,CACZnC,aAAciD,EAAajD,aAC3BC,UAAWgD,EAAahD,aAG5B,EAAKqD,SAASL,I,EAGhBK,SAAW,SAACL,GAC8B,KAApCA,EAAahB,YAAYQ,SAC3BQ,EAAavB,QAAU,gDACvBuB,EAAahB,YAAc,GAC3B,EAAKE,SAAS,CACZT,QAASuB,EAAavB,QACtBO,YAAagB,EAAahB,gB,wEAM9B,OACA,6BACE,kBAAC,EAAD,CAAQhC,UACNH,KAAKkC,MAAM/B,UAEbD,aACEF,KAAKkC,MAAMhC,eAGb,kBAAC,EAAD,CACE0B,QACE5B,KAAKkC,MAAMN,QAEbC,QACE7B,KAAKkC,MAAML,UAGf,kBAAC4B,EAAD,CACEpD,WACEL,KAAKkC,MAAM7B,WAEbC,gBACEN,KAAKM,uB,GA7GG0B,IAAM5B,WCKJsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b6543b03.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  MDBNavbar,\r\n  MDBNavbarBrand,\r\n  MDBNavbarNav,\r\n  MDBNavItem,\r\n  MDBNavLink\r\n} from \"mdbreact\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport \"./style.css\";\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <MDBNavbar color=\"black\" dark expand=\"md\">\r\n          <MDBNavbarBrand>\r\n            <strong className=\"white-text\">Clicky Game&nbsp;&nbsp;<i className=\"fas fa-mouse-pointer\"></i></strong>\r\n          </MDBNavbarBrand>\r\n          <MDBNavbarNav right>\r\n            <MDBNavItem>\r\n              <MDBNavLink to=\"#!\" active>Current Score: {this.props.currentScore}</MDBNavLink>\r\n            </MDBNavItem>\r\n            <MDBNavItem>\r\n              <MDBNavLink to=\"#!\" active><i className=\"fas fa-trophy\"></i> {this.props.highScore}</MDBNavLink>\r\n            </MDBNavItem>\r\n          </MDBNavbarNav>\r\n        </MDBNavbar>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport { MDBView, MDBContainer, MDBRow, MDBCol } from \"mdbreact\";\r\nimport \"./style.css\";\r\n\r\n\r\nexport default ({ characters , handleSelection }) =>(\r\n    <MDBContainer className=\"mt-5\" id=\"myContainer\">\r\n    <MDBRow className=\"mt-4\">\r\n      {characters.map(char => (\r\n      <MDBCol md=\"3\" key={char.id}>\r\n      <MDBView hover zoom>\r\n        <img              \r\n          src={char.image}\r\n          className=\"img-fluid img-thumbnail\"\r\n          data-name={char.name}\r\n          data-id={char.id}\r\n          alt=\"\"\r\n          onClick={handleSelection}\r\n        />    \r\n      </MDBView>\r\n    </MDBCol> \r\n      ))}\r\n     \r\n    </MDBRow>\r\n  </MDBContainer>\r\n  )\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport { MDBJumbotron, MDBContainer } from \"mdbreact\";\r\nimport \"./style.css\"\r\n\r\nclass Jumbo extends React.Component {\r\n\r\n  getStyle =(bool) =>({\r\n\r\n    0 : {\r\n                fontWeight: \"bold\"   \r\n        },\r\n    \r\n    true : {\r\n                color: \"green\",\r\n                fontWeight: \"bold\"        \r\n            } ,\r\n    \r\n    false : {\r\n                color: \"red\",\r\n                fontWeight: \"bold\"        \r\n            }\r\n    \r\n})[bool]\r\n\r\nrender() {\r\n  const { message,correct } = this.props\r\n  return (    \r\n    <MDBJumbotron fluid className=\"rounded\">\r\n      <MDBContainer className=\"h-75\">\r\n        <h1 className=\"text-center\" \r\n          style={this.getStyle(correct)}>{\r\n            message === \"\" ? \"Will you be the true Ruler of the Seven Kingdoms?\" : message }\r\n            </h1> \r\n        <br></br>\r\n        <hr className=\"my-2\" />\r\n        <p className=\"lead\">Rules</p>\r\n        <p>1) Click on a character that has not been selected</p>\r\n        <p>2) Try to select all character exactly once (12 in total) </p>\r\n      </MDBContainer>\r\n    </MDBJumbotron>\r\n  )}\r\n}\r\n\r\nexport default Jumbo;","import React from \"react\";\nimport Navbar from \"./Components/Navbar\";\nimport Grid from \"./Components/Grid\";\nimport Jumbo from \"./Components/Jumbo\";\nimport \"./App.css\";\nimport characters from \"./characters.json\";\n\nclass App extends React.Component {\n  state = {\n    characters: characters,\n    pickedChars: [],\n    currentScore: 0,\n    highScore: 0,\n    message: \"\",\n    correct: 0\n  };\n\n  shuffleCharacters = () => {\n    this.setState({\n      characters: this.shuffle(this.state.characters)\n    })\n  };\n\n  shuffle = a => {\n    var j, x, i;\n    for (i = a.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = a[i];\n      a[i] = a[j];\n      a[j] = x;\n    }\n    return a;\n  };\n\n  handleSelection = (event) => {\n    const name = event.target.getAttribute(\"data-name\")\n    this.checkClickGuess(name);\n    this.shuffleCharacters();\n\n  }\n\n\n\n  checkClickGuess = (name) => {\n    var updatedState = { ...this.state };\n    if (updatedState.pickedChars.includes(name)) {\n      updatedState.message = `WRONG! YOU ALREADY PICKED ${name.toUpperCase()}!`\n      updatedState.pickedChars = []\n      updatedState.currentScore = 0\n      updatedState.correct = false\n      this.setState({\n        message: updatedState.message,\n        pickedChars: updatedState.pickedChars,\n        currentScore: updatedState.currentScore,\n        correct: updatedState.correct})\n    } else {\n      updatedState.pickedChars.push(name)\n      updatedState.message = `CORRECT!`\n      updatedState.correct = true\n      this.setState({\n        pickedChars: updatedState.pickedChars,\n        message: updatedState.message,\n        correct: updatedState.correct\n      })\n    }\n    this.updateTopScore(updatedState)\n  }\n\n  updateTopScore = (updatedState) => {\n    if (updatedState.pickedChars.length > updatedState.currentScore) {\n      updatedState.currentScore++\n      if (updatedState.currentScore > updatedState.highScore) {\n        updatedState.highScore++\n      }\n      this.setState({\n        currentScore: updatedState.currentScore,\n        highScore: updatedState.highScore\n      })\n    }\n    this.checkWin(updatedState)\n  }\n\n  checkWin = (updatedState) => {\n    if (updatedState.pickedChars.length === 12) {\n      updatedState.message = \"ALL HAIL THE TRUE RULER OF THE SEVEN KINGDOMS\";\n      updatedState.pickedChars = [];\n      this.setState({\n        message: updatedState.message,\n        pickedChars: updatedState.pickedChars\n      })\n    }\n  }\n\n  render() {\n    return ( \n    <div>\n      <Navbar highScore = {\n        this.state.highScore\n      }\n      currentScore = {\n        this.state.currentScore\n      }\n      /> \n      <Jumbo \n        message = {\n          this.state.message\n        }\n        correct = {\n          this.state.correct\n        }\n      /> \n      <Grid \n        characters = {\n          this.state.characters\n        }\n        handleSelection = {\n          this.handleSelection\n        }\n      /> \n      </div >\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}